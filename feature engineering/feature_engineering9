import os
import pandas as pd
from sklearn import tree
from sklearn import model_selection
from sklearn import decomposition
import seaborn as sns
from sklearn.tree import DecisionTreeRegressor
from sklearn import ensemble

#returns current working directory
os.getcwd()
#changes working directory
os.chdir('C:/Projects/DataScience/Titanic_machineLearning')
titanic_train = pd.read_csv("train.csv")
#titanic_train['label'] = 'train'
titanic_test = pd.read_csv("test.csv")
#titanic_test['label'] = 'test'

titanic_train.info()



concat_df = pd.concat([titanic_train , titanic_test])
concat_df['Pclass'] = concat_df.Pclass.astype('category',categories = [3,2,1],ordered = True)

##Ploting
#pd.crosstab(index=concat_df['Survived'], columns=concat_df['Pclass'])
#sns.factorplot(x="Survived", hue="Pclass", data=concat_df, kind="count", size=6)
###


## AGE analysis##############################################
titanic_all_age  = pd.get_dummies(concat_df, columns=['Sex', 'Embarked'])

titanic_all_age_1 = titanic_all_age.drop(['PassengerId','Cabin', 'Name','Survived','Ticket'], 1)

titanic_all_age_1.Fare[titanic_all_age_1['Fare'].isnull()] = titanic_all_age_1['Fare'].mean()

ageTestDf = titanic_all_age_1['Age'].isnull()
age_test = titanic_all_age_1[ageTestDf]

X_test_age = age_test.drop(['Age'], 1)
#y_test_age = age_test['Age']

ageTrainDf = titanic_all_age_1['Age'].notnull()
age_train = titanic_all_age_1[ageTrainDf]

X_train_age = age_train.drop(['Age'], 1)
y_train_age = age_train['Age']


def fill_age(X_train_age, y_train_age,X_test_age):
    print('X_train_age',X_train_age.shape)
    print('y_train_age',y_train_age.shape)
    print('X_test_age',X_test_age.shape)
    dt_regr = DecisionTreeRegressor(max_depth=2)
    dt_regr.fit(X_train_age, y_train_age)
    X_test_age['Age'] = dt_regr.predict(X_test_age)
    return X_test_age


corr = titanic_all_age_1.select_dtypes(include = ['number']).corr()  
corr_list1 = corr['Age'].sort_values(axis=0,ascending=False)  

##########################################################
def size_to_type(x):
    if(x == 1): 
        return 'Single'
    elif(x >= 2 and x <= 4): 
        return 'Small'
    else: 
        return 'Large'
    
concat_df['FamilySize'] = concat_df.SibSp + concat_df.Parch + 1
concat_df['FamilyType'] = concat_df['FamilySize'].map(size_to_type)

titanic_all  = pd.get_dummies(concat_df, columns=['Sex', 'Embarked','Ticket','FamilyType'])

titanic_all1 = titanic_all.drop(['PassengerId','Cabin', 'Name','Survived'], 1)




#titanic_all1.Embarked[titanic_all1['Embarked'].isnull()] = 'S'
titanic_all1.Fare[titanic_all1['Fare'].isnull()] = titanic_all1['Fare'].mean()


titanic_all1.loc[(titanic_all1.Age.isnull()), 'Age'] = fill_age(X_train_age, y_train_age,X_test_age)



titanic_train1 = titanic_all1[:titanic_train.shape[0]]
titanic_test1 = titanic_all1[titanic_train.shape[0]:]

#
#titanic_train1 = titanic_all1[titanic_all1['label_train'] == 1]
#titanic_test1 = titanic_all1[titanic_all1['label_test'] ==1]
#
#titanic_train1 = titanic_train1.drop(['label_train'], 1)
#titanic_test1 = titanic_test1.drop(['label_test'], 1)



#X_train = titanic_train1.drop(['PassengerId','Age','Cabin', 'Name','Survived'], 1)
y_train = titanic_train['Survived']


rf_estimator = ensemble.RandomForestClassifier()
rf_grid = {'n_estimators':list(range(100,500,100))}
rf_grid_estimator = model_selection.GridSearchCV(rf_estimator,rf_grid, cv=10, n_jobs=10)
rf_grid_estimator.fit(titanic_train1, y_train)
#featureImp = pd.DataFrame({'cols' : X_train.columns, 'Imp_ab' :list(rf_grid_estimator.best_estimator_.feature_importances_)})
#featureImp.sort_values(by='Imp_ab',ascending=False,inplace = True)
rf_grid_estimator.grid_scores_
rf_grid_estimator.best_estimator_
print("CvScore",rf_grid_estimator.best_score_)
rf_grid_estimator.best_estimator_.feature_importances_
print("Train accuracy",rf_grid_estimator.score(titanic_train1, y_train))



dt = tree.DecisionTreeClassifier()
param_grid = {'max_depth':[3,4,5,6,7,8,9,10], 'min_samples_split':[2,3,4,5,6,7,8,9,10,11,12]}
dt_grid = model_selection.GridSearchCV(dt, param_grid, cv=10, n_jobs=5)
dt_grid.fit(titanic_train1, y_train)
dt_grid.grid_scores_
dt_grid.best_estimator_
dt_grid.best_score_
dt_grid.score(titanic_train1, y_train)

titanic_test['Survived'] = dt_grid.predict(titanic_test1)
titanic_test.to_csv("submission.csv", columns=['PassengerId','Survived'], index=False)
